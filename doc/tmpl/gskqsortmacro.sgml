<!-- ##### SECTION Title ##### -->
gskqsortmacro

<!-- ##### SECTION Short_Description ##### -->
inline qsort macro

<!-- ##### SECTION Long_Description ##### -->
<para>
This is an implementation of qsort that avoids
recursion and uses a fixed-length stack.
As such, it is suitable for a macro implementation.
</para>
<para>
Please note that usually qsort() or g_qsort_with_data()
is nicer to use than the macro version: it will
compile to less code, for example.
However, the macro-based version is often faster,
and can be more convenient to use than
the other routines.  For example, since the macro
is lexically inlined, the comparator can use local variables.
</para>
<para>
Here is an example: this qsorts an array
of integers, considering only the least n_bits bits:
<programlisting>
<![CDATA[
 static void
 qsort_least_significant_bits (guint  array_len,
                               guint *array,
			       guint  n_bits)
 {
   guint mask = (1 << n_bits) - 1;
]]>&hash;<![CDATA[define COMPARE(a,b,rv)       \
  { guint tmp_a = mask & a;   \
    guint tmp_b = mask & b;   \
    rv = (tmp_a < tmp_b) ? -1 \
       : (tmp_a > tmp_b) ? +1 \
       0; }
  GSK_QSORT (array, guint, array_len, COMPARE);
]]>&hash;<![CDATA[undef COMPARE
 }
]]>
</programlisting>
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
The gskrbtreemacros, which can maintain a set in sorted order,
so that the set can be walked in O(N) time, and each insert, delete or lookup
is O(log N).
</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### MACRO GSK_QSORT_STACK_MAX_SIZE ##### -->
<para>
Maximum stack size to use for QSORT.
Only should be changed if stack-space is very limited.
</para>



<!-- ##### MACRO GSK_INSERTION_SORT_THRESHOLD ##### -->
<para>
Maximum number of elements for which insertion sort
is preferred to quicksort.
</para>



<!-- ##### MACRO GSK_QSORT ##### -->
<para>
Sort an array.
</para>

@array:  The array of values to sort.
@type: The type of an element of the array.
@n_elements: The number of elements in @array to sort.
@compare: A comparator macro.


<!-- ##### MACRO GSK_QSORT_DEBUG ##### -->
<para>
Quicksort, with stack-checking.
</para>

@array:  The array of values to sort.
@type: The type of an element of the array.
@n_elements: The number of elements in @array to sort.
@compare: A comparator macro.


<!-- ##### MACRO GSK_QSORT_FULL ##### -->
<para>
Quicksort, with a bit more configurability.
</para>

@array: the array
@type: the type of elements in the array.
@n_elements: the number of elements in the array.
@compare: comparator macro
@isort_threshold: maximum size of array to insertion-sort
instead of quicksort.
@stack_size: maximum number of stack required.
@ss_assertion: a macro which can do the stack-guard assertion.
Should be blank or GSK_QSORT_ASSERT_STACK_SIZE.


<!-- ##### MACRO GSK_QSELECT_FULL ##### -->
<para>
Computes the top @n_select elements of an
array which has @n_elements elements in it.
The top @n_select elements will be sorted.
</para>

@array: the array
@type: the type of elements in the array.
@n_elements: the number of elements in the array.
@n_select: the number of elements to get in the sorted part.
@compare: comparator macro
@isort_threshold: maximum size of array to insertion-sort
instead of quicksort.
@stack_size: maximum number of stack required.
@ss_assertion: a macro which can do the stack-guard assertion.
Should be blank or GSK_QSORT_ASSERT_STACK_SIZE.


<!-- ##### MACRO GSK_QSORT_ASSERT_STACK_SIZE ##### -->
<para>
Macro to verify that the stack is not overflowed.
The stack can overflow if the comparator is invalid.
</para>

@stack_alloced: 


<!-- ##### MACRO GSK_INSERTION_SORT ##### -->
<para>
An insertion-sort implementation,
which is used by the quicksort in the case
of small arrays.
</para>

@array:  The array of values to sort.
@type: The type of an element of the array.
@length: The number elements in @array.
@compare: comparator macro


<!-- ##### MACRO GSK_QSORT_SIMPLE_COMPARATOR ##### -->
<para>
A comparator macro that just uses the normal operators &lt;,
&gt; and ==.
</para>

@a: the first element
@b: the second element
@compare_rv: set to -1, 0, 1 if @a is less than, equal to, or greater than @b.


